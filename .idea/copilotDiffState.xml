<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/google_world_web/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/google_world_web/MainActivity.kt" />
              <option name="originalContent" value="package com.example.google_world_web&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import kotlinx.coroutines.launch&#10;import com.example.google_world_web.ui.theme.GoogleWorldWebTheme&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.DrawerValue&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ModalDrawerSheet&#10;import androidx.compose.material3.ModalNavigationDrawer&#10;import androidx.compose.material3.NavigationDrawerItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import kotlin.toString&#10;&#10;data class FileItem(&#10;    val name: String,&#10;    val dateAdded: Long // Use System.currentTimeMillis() for example&#10;)&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            GoogleWorldWebTheme {&#10;                NavigationApp()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun NavigationApp() {&#10;    var showAddFileDialog by remember { mutableStateOf(false) }&#10;    var sortBy by remember { mutableStateOf(&quot;Name&quot;) } // &lt;-- Add this line&#10;    var viewType by remember { mutableStateOf(&quot;Details&quot;) } // &lt;-- Add this line&#10;    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)&#10;    val scope = rememberCoroutineScope()&#10;    val navController = rememberNavController()&#10;    &#10;    val items = listOf(&#10;        NavigationItem(&quot;Recent&quot;, Icons.Default.AccessTime, &quot;recent&quot;),&#10;        NavigationItem(&quot;Starred&quot;, Icons.Default.Star, &quot;starred&quot;),&#10;        NavigationItem(&quot;Offline&quot;, Icons.Default.CloudOff, &quot;offline&quot;),&#10;        NavigationItem(&quot;Bin&quot;, Icons.Default.Delete, &quot;bin&quot;),&#10;        NavigationItem(&quot;Notifications&quot;, Icons.Default.Notifications, &quot;notifications&quot;),&#10;        NavigationItem(&quot;Settings&quot;, Icons.Default.Settings, &quot;settings&quot;),&#10;        NavigationItem(&quot;Help &amp; Feedback&quot;, Icons.Default.Info, &quot;help&quot;)&#10;    )&#10;    &#10;    ModalNavigationDrawer(&#10;        drawerState = drawerState,&#10;        drawerContent = {&#10;            ModalDrawerSheet {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable {&#10;                            navController.navigate(&quot;home&quot;) {&#10;                                popUpTo(&quot;home&quot;) {&#10;                                    inclusive = true&#10;                                }&#10;                            }&#10;                            scope.launch {&#10;                                drawerState.close()&#10;                            }&#10;                        }&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        &quot;Google World Web&quot;,&#10;                        style = MaterialTheme.typography.titleMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        &quot;Tap to go home&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                items.forEach { item -&gt;&#10;                    NavigationDrawerItem(&#10;                        icon = { Icon(item.icon, contentDescription = null) },&#10;                        label = { Text(item.title) },&#10;                        selected = navController.currentDestination?.route == item.route,&#10;                        onClick = {&#10;                            navController.navigate(item.route) {&#10;                                popUpTo(&quot;home&quot;) {&#10;                                    saveState = true&#10;                                }&#10;                                launchSingleTop = true&#10;                                restoreState = true&#10;                            }&#10;                            scope.launch {&#10;                                drawerState.close()&#10;                            }&#10;                        },&#10;                        modifier = Modifier.padding(horizontal = 12.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) {&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            // Custom Title Bar&#10;            Surface(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(80.dp)&#10;                    .padding(16.dp),&#10;                shape = RoundedCornerShape(20.dp),&#10;                color = MaterialTheme.colorScheme.surface,&#10;                shadowElevation = 8.dp&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(horizontal = 16.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    IconButton(&#10;                        onClick = {&#10;                            scope.launch {&#10;                                if (drawerState.isClosed) {&#10;                                    drawerState.open()&#10;                                } else {&#10;                                    drawerState.close()&#10;                                }&#10;                            }&#10;                        }&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Menu,&#10;                            contentDescription = &quot;Menu&quot;,&#10;                            modifier = Modifier.size(24.dp),&#10;                            tint = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                    Text(&#10;                        text = &quot;Search Here&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                }&#10;            }&#10;            // Place the sort button below the title bar with a modifiable distance&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 75.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(horizontal = 32.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.End&#10;                ) {&#10;                    DropdownMenuSort(sortBy) { sortBy = it }&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    ViewTypeSelector(viewType) { viewType = it }&#10;                }&#10;            }&#10;            //Main content area&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(top = 96.dp) // 80dp title bar + 16dp padding&#10;            ) {&#10;                NavHost(&#10;                    navController = navController,&#10;                    startDestination = &quot;home&quot;&#10;                ) {&#10;                    composable(&quot;home&quot;) {&#10;                        HomePage(sortBy, viewType)&#10;                    }&#10;                    composable(&quot;recent&quot;) {&#10;                        RecentPage(sortBy, viewType)&#10;                    }&#10;                    composable(&quot;starred&quot;) {&#10;                        StarredPage()&#10;                    }&#10;                    composable(&quot;offline&quot;) {&#10;                        OfflinePage()&#10;                    }&#10;                    composable(&quot;bin&quot;) {&#10;                        BinPage()&#10;                    }&#10;                    composable(&quot;notifications&quot;) {&#10;                        NotificationsPage()&#10;                    }&#10;                    composable(&quot;settings&quot;) {&#10;                        SettingsPage()&#10;                    }&#10;                    composable(&quot;help&quot;) {&#10;                        HelpPage()&#10;                    }&#10;                }&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(24.dp),&#10;                    contentAlignment = Alignment.TopStart&#10;                ) {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    }&#10;                }&#10;&#10;                // FAB at bottom right&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(24.dp),&#10;                    contentAlignment = Alignment.BottomEnd&#10;                ) {&#10;                    FloatingActionButton(&#10;                        onClick = { showAddFileDialog = true }&#10;                    ) {&#10;                        Icon(Icons.Default.Add, contentDescription = &quot;Add File&quot;)&#10;                    }&#10;                }&#10;&#10;                // Add File Dialog&#10;                if (showAddFileDialog) {&#10;                    AlertDialog(&#10;                        onDismissRequest = { showAddFileDialog = false },&#10;                        title = { Text(&quot;Add File&quot;) },&#10;                        text = { Text(&quot;File adding functionality coming soon.&quot;) },&#10;                        confirmButton = {&#10;                            TextButton(onClick = { showAddFileDialog = false }) {&#10;                                Text(&quot;OK&quot;)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ViewTypeSelector(selected: String, onSelect: (String) -&gt; Unit) {&#10;    Row {&#10;        listOf(&quot;Details&quot;, &quot;List&quot;, &quot;Icons&quot;).forEach { type -&gt;&#10;            TextButton(&#10;                onClick = { onSelect(type) },&#10;                colors = ButtonDefaults.textButtonColors(&#10;                    contentColor = if (selected == type) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurface&#10;                )&#10;            ) {&#10;                Text(type)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Update HomePage and RecentPage signatures:&#10;@Composable&#10;fun HomePage(sortBy: String, viewType: String) {&#10;    val files = remember {&#10;        mutableStateListOf(&#10;            FileItem(&quot;Document.txt&quot;, 1718000000000),&#10;            FileItem(&quot;Image.png&quot;, 1718100000000),&#10;            FileItem(&quot;Notes.pdf&quot;, 1718200000000)&#10;        )&#10;    }&#10;    val sortedFiles = when (sortBy) {&#10;        &quot;Name&quot; -&gt; files.sortedBy { it.name }&#10;        &quot;Date&quot; -&gt; files.sortedByDescending { it.dateAdded }&#10;        else -&gt; files&#10;    }&#10;    FileListView(files = sortedFiles, viewType = viewType)&#10;}&#10;&#10;@Composable&#10;fun RecentPage(sortBy: String, viewType: String) {&#10;    val files = remember {&#10;        mutableStateListOf(&#10;            FileItem(&quot;Recent1.txt&quot;, 1718300000000),&#10;            FileItem(&quot;Recent2.png&quot;, 1718400000000)&#10;        )&#10;    }&#10;    val sortedFiles = when (sortBy) {&#10;        &quot;Name&quot; -&gt; files.sortedBy { it.name }&#10;        &quot;Date&quot; -&gt; files.sortedByDescending { it.dateAdded }&#10;        else -&gt; files&#10;    }&#10;    FileListView(files = sortedFiles, viewType = viewType)&#10;}&#10;&#10;@Composable&#10;fun FileListView(files: List&lt;FileItem&gt;, viewType: String) {&#10;    when (viewType) {&#10;        &quot;Details&quot; -&gt; Column {&#10;            files.forEach { file -&gt;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(Icons.Default.Description, contentDescription = null)&#10;                    Spacer(Modifier.width(8.dp))&#10;                    Text(file.name, modifier = Modifier.weight(1f))&#10;                    Text(file.dateAdded.toString())&#10;                }&#10;            }&#10;        }&#10;        &quot;List&quot; -&gt; Column {&#10;            files.forEach { file -&gt;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(Icons.Default.Description, contentDescription = null)&#10;                    Spacer(Modifier.width(8.dp))&#10;                    Text(file.name)&#10;                }&#10;            }&#10;        }&#10;        &quot;Icons&quot; -&gt; Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(8.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            files.forEach { file -&gt;&#10;                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    Icon(Icons.Default.Description, contentDescription = null, modifier = Modifier.size(48.dp))&#10;                    Text(file.name, maxLines = 1)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StarredPage() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Star,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Starred&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;Your starred items will appear here&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OfflinePage() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.CloudOff,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Offline&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;Offline content will appear here&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BinPage() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Delete,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Bin&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;Deleted items will appear here&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NotificationsPage() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Notifications,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Notifications&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;Your notifications will appear here&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SettingsPage() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Settings&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;App settings will appear here&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HelpPage() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Info,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Help &amp; Feedback&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;Help and feedback options will appear here&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DropdownMenuSort(selected: String, onSelect: (String) -&gt; Unit) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;    val textStyle = MaterialTheme.typography.titleMedium.copy(&#10;        color = androidx.compose.ui.graphics.Color.Black // Set font color to black&#10;    )&#10;    Box {&#10;        TextButton(onClick = { expanded = true }) {&#10;            Text(&#10;                selected,&#10;                style = textStyle // Use the custom style&#10;            )&#10;        }&#10;        DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {&#10;            DropdownMenuItem(&#10;                text = { Text(&quot;Name&quot;, style = textStyle) },&#10;                onClick = {&#10;                    onSelect(&quot;Name&quot;)&#10;                    expanded = false&#10;                }&#10;            )&#10;            DropdownMenuItem(&#10;                text = { Text(&quot;Date&quot;, style = textStyle) },&#10;                onClick = {&#10;                    onSelect(&quot;Date&quot;)&#10;                    expanded = false&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;data class NavigationItem(&#10;    val title: String,&#10;    val icon: ImageVector,&#10;    val route: String&#10;)&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun NavigationAppPreview() {&#10;    GoogleWorldWebTheme {&#10;        NavigationApp()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.google_world_web&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import kotlinx.coroutines.launch&#10;import com.example.google_world_web.ui.theme.GoogleWorldWebTheme&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.DrawerValue&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ModalDrawerSheet&#10;import androidx.compose.material3.ModalNavigationDrawer&#10;import androidx.compose.material3.NavigationDrawerItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import kotlin.toString&#10;&#10;data class FileItem(&#10;    val name: String,&#10;    val dateAdded: Long // Use System.currentTimeMillis() for example&#10;)&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            GoogleWorldWebTheme {&#10;                NavigationApp()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun NavigationApp() {&#10;    var showAddFileDialog by remember { mutableStateOf(false) }&#10;    var sortBy by remember { mutableStateOf(&quot;Name&quot;) } // &lt;-- Add this line&#10;    var viewType by remember { mutableStateOf(&quot;List&quot;) } // &lt;-- Add this line&#10;    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)&#10;    val scope = rememberCoroutineScope()&#10;    val navController = rememberNavController()&#10;    &#10;    val items = listOf(&#10;        NavigationItem(&quot;Recent&quot;, Icons.Default.AccessTime, &quot;recent&quot;),&#10;        NavigationItem(&quot;Starred&quot;, Icons.Default.Star, &quot;starred&quot;),&#10;        NavigationItem(&quot;Offline&quot;, Icons.Default.CloudOff, &quot;offline&quot;),&#10;        NavigationItem(&quot;Bin&quot;, Icons.Default.Delete, &quot;bin&quot;),&#10;        NavigationItem(&quot;Notifications&quot;, Icons.Default.Notifications, &quot;notifications&quot;),&#10;        NavigationItem(&quot;Settings&quot;, Icons.Default.Settings, &quot;settings&quot;),&#10;        NavigationItem(&quot;Help &amp; Feedback&quot;, Icons.Default.Info, &quot;help&quot;)&#10;    )&#10;    &#10;    ModalNavigationDrawer(&#10;        drawerState = drawerState,&#10;        drawerContent = {&#10;            ModalDrawerSheet {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable {&#10;                            navController.navigate(&quot;home&quot;) {&#10;                                popUpTo(&quot;home&quot;) {&#10;                                    inclusive = true&#10;                                }&#10;                            }&#10;                            scope.launch {&#10;                                drawerState.close()&#10;                            }&#10;                        }&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        &quot;Google World Web&quot;,&#10;                        style = MaterialTheme.typography.titleMedium&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        &quot;Tap to go home&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                items.forEach { item -&gt;&#10;                    NavigationDrawerItem(&#10;                        icon = { Icon(item.icon, contentDescription = null) },&#10;                        label = { Text(item.title) },&#10;                        selected = navController.currentDestination?.route == item.route,&#10;                        onClick = {&#10;                            navController.navigate(item.route) {&#10;                                popUpTo(&quot;home&quot;) {&#10;                                    saveState = true&#10;                                }&#10;                                launchSingleTop = true&#10;                                restoreState = true&#10;                            }&#10;                            scope.launch {&#10;                                drawerState.close()&#10;                            }&#10;                        },&#10;                        modifier = Modifier.padding(horizontal = 12.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) {&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            // Custom Title Bar&#10;            Surface(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(80.dp)&#10;                    .padding(16.dp),&#10;                shape = RoundedCornerShape(20.dp),&#10;                color = MaterialTheme.colorScheme.surface,&#10;                shadowElevation = 8.dp&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(horizontal = 16.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    IconButton(&#10;                        onClick = {&#10;                            scope.launch {&#10;                                if (drawerState.isClosed) {&#10;                                    drawerState.open()&#10;                                } else {&#10;                                    drawerState.close()&#10;                                }&#10;                            }&#10;                        }&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Menu,&#10;                            contentDescription = &quot;Menu&quot;,&#10;                            modifier = Modifier.size(24.dp),&#10;                            tint = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                    Text(&#10;                        text = &quot;Search Here&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                }&#10;            }&#10;            // Place the sort and view type buttons below the title bar&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 100.dp, start = 32.dp, end = 32.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Box(modifier = Modifier.weight(1f), contentAlignment = Alignment.CenterStart) {&#10;                    DropdownMenuSort(sortBy) { sortBy = it }&#10;                }&#10;                Box(modifier = Modifier.weight(1f), contentAlignment = Alignment.CenterEnd) {&#10;                    DropdownMenuViewType(viewType) { viewType = it }&#10;                }&#10;            }&#10;            // Main Content with padding for title bar and sort/view row&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(top = 140.dp) // 80dp title bar + 16dp padding + 44dp row&#10;            ) {&#10;                NavHost(&#10;                    navController = navController,&#10;                    startDestination = &quot;home&quot;&#10;                ) {&#10;                    composable(&quot;home&quot;) {&#10;                        HomePage(sortBy, viewType)&#10;                    }&#10;                    composable(&quot;recent&quot;) {&#10;                        RecentPage(sortBy, viewType)&#10;                    }&#10;                    composable(&quot;starred&quot;) {&#10;                        StarredPage()&#10;                    }&#10;                    composable(&quot;offline&quot;) {&#10;                        OfflinePage()&#10;                    }&#10;                    composable(&quot;bin&quot;) {&#10;                        BinPage()&#10;                    }&#10;                    composable(&quot;notifications&quot;) {&#10;                        NotificationsPage()&#10;                    }&#10;                    composable(&quot;settings&quot;) {&#10;                        SettingsPage()&#10;                    }&#10;                    composable(&quot;help&quot;) {&#10;                        HelpPage()&#10;                    }&#10;                }&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(24.dp),&#10;                    contentAlignment = Alignment.TopStart&#10;                ) {&#10;                    Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    }&#10;                }&#10;&#10;                // FAB at bottom right&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(24.dp),&#10;                    contentAlignment = Alignment.BottomEnd&#10;                ) {&#10;                    FloatingActionButton(&#10;                        onClick = { showAddFileDialog = true }&#10;                    ) {&#10;                        Icon(Icons.Default.Add, contentDescription = &quot;Add File&quot;)&#10;                    }&#10;                }&#10;&#10;                // Add File Dialog&#10;                if (showAddFileDialog) {&#10;                    AlertDialog(&#10;                        onDismissRequest = { showAddFileDialog = false },&#10;                        title = { Text(&quot;Add File&quot;) },&#10;                        text = { Text(&quot;File adding functionality coming soon.&quot;) },&#10;                        confirmButton = {&#10;                            TextButton(onClick = { showAddFileDialog = false }) {&#10;                                Text(&quot;OK&quot;)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ViewTypeSelector(selected: String, onSelect: (String) -&gt; Unit) {&#10;    Row {&#10;        listOf(&quot;Details&quot;, &quot;List&quot;, &quot;Icons&quot;).forEach { type -&gt;&#10;            TextButton(&#10;                onClick = { onSelect(type) },&#10;                colors = ButtonDefaults.textButtonColors(&#10;                    contentColor = if (selected == type) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurface&#10;                )&#10;            ) {&#10;                Text(type)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Update HomePage and RecentPage signatures:&#10;@Composable&#10;fun HomePage(sortBy: String, viewType: String) {&#10;    val files = remember {&#10;        mutableStateListOf(&#10;            FileItem(&quot;Document.txt&quot;, 1718000000000),&#10;            FileItem(&quot;Image.png&quot;, 1718100000000),&#10;            FileItem(&quot;Notes.pdf&quot;, 1718200000000)&#10;        )&#10;    }&#10;    val sortedFiles = when (sortBy) {&#10;        &quot;Name&quot; -&gt; files.sortedBy { it.name }&#10;        &quot;Date&quot; -&gt; files.sortedByDescending { it.dateAdded }&#10;        else -&gt; files&#10;    }&#10;    if (viewType == &quot;List&quot;) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize().padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            for (file in sortedFiles) {&#10;                Text(&quot;${file.name} - ${file.dateAdded}&quot;)&#10;            }&#10;        }&#10;    } else {&#10;        // Grid view&#10;        LazyVerticalGrid(&#10;            columns = GridCells.Fixed(2),&#10;            modifier = Modifier.fillMaxSize().padding(16.dp)&#10;        ) {&#10;            items(sortedFiles) { file -&gt;&#10;                Text(&quot;${file.name} - ${file.dateAdded}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecentPage(sortBy: String, viewType: String) {&#10;    val files = remember {&#10;        mutableStateListOf(&#10;            FileItem(&quot;Recent1.txt&quot;, 1718300000000),&#10;            FileItem(&quot;Recent2.png&quot;, 1718400000000)&#10;        )&#10;    }&#10;    val sortedFiles = when (sortBy) {&#10;        &quot;Name&quot; -&gt; files.sortedBy { it.name }&#10;        &quot;Date&quot; -&gt; files.sortedByDescending { it.dateAdded }&#10;        else -&gt; files&#10;    }&#10;    if (viewType == &quot;List&quot;) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize().padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            for (file in sortedFiles) {&#10;                Text(&quot;${file.name} - ${file.dateAdded}&quot;)&#10;            }&#10;        }&#10;    } else {&#10;        // Grid view&#10;        LazyVerticalGrid(&#10;            columns = GridCells.Fixed(2),&#10;            modifier = Modifier.fillMaxSize().padding(16.dp)&#10;        ) {&#10;            items(sortedFiles) { file -&gt;&#10;                Text(&quot;${file.name} - ${file.dateAdded}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FileListView(files: List&lt;FileItem&gt;, viewType: String) {&#10;    when (viewType) {&#10;        &quot;Details&quot; -&gt; Column {&#10;            files.forEach { file -&gt;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(Icons.Default.Description, contentDescription = null)&#10;                    Spacer(Modifier.width(8.dp))&#10;                    Text(file.name, modifier = Modifier.weight(1f))&#10;                    Text(file.dateAdded.toString())&#10;                }&#10;            }&#10;        }&#10;        &quot;List&quot; -&gt; Column {&#10;            files.forEach { file -&gt;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(Icons.Default.Description, contentDescription = null)&#10;                    Spacer(Modifier.width(8.dp))&#10;                    Text(file.name)&#10;                }&#10;            }&#10;        }&#10;        &quot;Icons&quot; -&gt; Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(8.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            files.forEach { file -&gt;&#10;                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    Icon(Icons.Default.Description, contentDescription = null, modifier = Modifier.size(48.dp))&#10;                    Text(file.name, maxLines = 1)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StarredPage() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Star,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Starred&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;Your starred items will appear here&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OfflinePage() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.CloudOff,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Offline&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;Offline content will appear here&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BinPage() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Delete,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Bin&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;Deleted items will appear here&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NotificationsPage() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Notifications,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Notifications&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;Your notifications will appear here&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SettingsPage() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Settings&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;App settings will appear here&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HelpPage() {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Info,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Help &amp; Feedback&quot;,&#10;                style = MaterialTheme.typography.headlineSmall&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;Help and feedback options will appear here&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DropdownMenuSort(selected: String, onSelect: (String) -&gt; Unit) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;    val textStyle = MaterialTheme.typography.titleMedium.copy(&#10;        color = androidx.compose.ui.graphics.Color.Black&#10;    )&#10;    Box {&#10;        TextButton(onClick = { expanded = true }) {&#10;            Text(&#10;                selected,&#10;                style = textStyle&#10;            )&#10;        }&#10;        DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {&#10;            DropdownMenuItem(&#10;                text = { Text(&quot;Name&quot;, style = textStyle) },&#10;                onClick = {&#10;                    onSelect(&quot;Name&quot;)&#10;                    expanded = false&#10;                }&#10;            )&#10;            DropdownMenuItem(&#10;                text = { Text(&quot;Date&quot;, style = textStyle) },&#10;                onClick = {&#10;                    onSelect(&quot;Date&quot;)&#10;                    expanded = false&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DropdownMenuViewType(selected: String, onSelect: (String) -&gt; Unit) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;    val textStyle = MaterialTheme.typography.titleMedium.copy(&#10;        color = androidx.compose.ui.graphics.Color.Black&#10;    )&#10;    Box {&#10;        TextButton(onClick = { expanded = true }) {&#10;            Text(&#10;                selected,&#10;                style = textStyle&#10;            )&#10;        }&#10;        DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {&#10;            DropdownMenuItem(&#10;                text = { Text(&quot;List&quot;, style = textStyle) },&#10;                onClick = {&#10;                    onSelect(&quot;List&quot;)&#10;                    expanded = false&#10;                }&#10;            )&#10;            DropdownMenuItem(&#10;                text = { Text(&quot;Grid&quot;, style = textStyle) },&#10;                onClick = {&#10;                    onSelect(&quot;Grid&quot;)&#10;                    expanded = false&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;data class NavigationItem(&#10;    val title: String,&#10;    val icon: ImageVector,&#10;    val route: String&#10;)&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun NavigationAppPreview() {&#10;    GoogleWorldWebTheme {&#10;        NavigationApp()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>